[
["index.html", "R Programming for Research Online course book, ERHS 535", " R Programming for Research Colorado State University, ERHS 535 Brooke Anderson and Rachel Severson 2016-11-12 Online course book, ERHS 535 This is the online book for Colorado State University’s ERHS 535 R Programming for Research course. This book includes course information, course notes, links to download pdfs of lecture slides, in-course exercises, homework assignments, and vocabulary lists for quizzes for this course. Because this is my first semester teaching the course with this online book, it will be evolving throughout the semester, as we get to new material. "],
["course-information.html", "Course information 0.1 Course overview 0.2 Time and place 0.3 Detailed schedule 0.4 Grading 0.5 Course set-up 0.6 Helpful books for learning R", " Course information Download a pdf of the lecture slides covering this topic. 0.1 Course overview This document provides the course notes for Colorado State University’s ERHS 535 course for Fall 2016. The course offers in-depth instruction on data collection, data management, programming, and visualization, using data examples relevant to academic research. 0.2 Time and place This course meets in Room 120 of the Environmental Health Building on Mondays and Wednesdays, 10:00 am–12:00 pm. Exceptions to these meeting times are: There will be no meeting on Wednesday, Aug. 31. There will be no meeting on Labor Day (Monday, Sept. 5). To make up for missing class on Aug. 31, we will have a supplemental class on Friday, Sept. 9, 10:00 am–12:00 pm. You will not lose attendance points if you cannot attend this class, but will be responsible for the material covered. There are no course meetings the week of Thanksgiving. 0.3 Detailed schedule Here is a more detailed view of the schedule for this course for Fall 2016: Dates Level Lecture content Graded items Aug. 22, 24 Preliminary R Preliminaries Aug. 29 Basic Entering and cleaning data Sept. 7, Sept. 9* Basic Exploring data Quiz (W) Sept. 12, 14 Basic Reporting data results Quiz (M), HW #1 (W) Sept. 19, 21 Basic Reproducible Research Quiz (M) Sept. 26, 28 Intermediate Entering and cleaning data Quiz (M), HW #2 (W) Oct. 3, 5 Intermediate Exploring data Quiz (M) Oct. 10, 12 Intermediate Reporting data results Quiz (M), HW #3 (W) Oct. 17, 19 Intermediate Reproducible Research Quiz (M), Group choices (M) Oct. 24, 26 Advanced Entering and cleaning data Quiz (M), Project proposal (M), HW #4 (W) Oct. 31, Nov. 2 Advanced Exploring data Nov. 7, 9 Advanced Reporting data results HW #5 (W) Nov. 14, 16 Advanced Mapping in R Nov. 28, 30 Advanced Package development 1 HW #6 (W) Dec. 5, 7 Advanced Package development 2 Project draft (M) Week of Dec. 12 Group presentations Final project (M) 0.4 Grading Course grades will be determined by the following five components: Assessment component Percent of grade Final group project 30 Weekly in-class quizzes, weeks 3-10 25 Homework 25 Attendance and class participation 10 Weekly in-course group exercises 10 0.4.1 Attendance and class participation Because so much of the learning for this class is through interactive work in class, it is critical that you come to class. Out of a possible 10 points for class attendance, you will get: 10 points if you attend all classes 8 points if you miss one class 6 points if you miss two classes 4 points if you miss three classes 2 points if you miss four classes 0 points if you miss five or more classes You can get two extra credit attendance points (i.e., make up for a missed class) by attending either the seminar that Yihui Xie will give on Sept. 23 at 4:00 pm for the Statistics Department in Weber 237 to the short course he will give at 10:00-11:00 am in Weber 223H. (You are welcome to attend both, but can only get a maximum of two extra credit attendance points.) 0.4.2 Weekly in-course group exercises Part of each class will be spent doing in-course group exercises. Ten points of your final grade will be based on your participation in these exercises. As long as you are in class and participate in these exercises, you will get full credit for this component. If you miss a class, to get credit towards this component of your grade, you will need to turn in a one-page document describing what you learned from doing the in-course exercise on your own time. All in-class exercises are included in the online course book at the end of the chapter on the associated material. 0.4.3 In-class quizzes You will have eight total in-class quizzes. You will have one for each of the Week 2–10 class meetings. There will be at least 10 questions per quiz. You will get 1/3 point for each correct answer. If you do the math, you can get full credit for this if you get at least 75% of your answers right. You can not get more than the maximum of 25 points for this component– once you reach 25 points on quizzes, you will have achieved full credit for the quiz component of the course grade. All quiz questions will be multiple choice, matching, or some other form of “close-answered” question (i.e., no open-response-style questions). You can not make up a quiz for a class period you missed. You can still get full credit on your total possible quiz points if you miss a class, but it means you will have to work harder and get more questions right for days you are in class. Because grading format for these quizzes allows for you to miss some questions and still get the full quiz credit for the course, I will not ever re-consider the score you got on a previous quiz, give points back for a wrong answer on a poorly-worded question, etc. However, if a lot of people got a particular question wrong, I will be sure to cover it in the next class period. Also, especially if a question was poorly worded and caused confusion, I will work a similar question into a future quiz– in addition to the 10 guaranteed questions for that quiz– so every student will have the chance to get an extra 1/3 point of credit for the question. The “Vocabulary” appendix of our online book has the list of material for which you will be responsible for this quiz. Most of the functions and concepts will have been covered in class, but some may not. You are responsible for going through the list and, if there are things you don’t know or remember from class, learning them. To do this, you can use help functions in R, Google, StackOverflow, books on R, ask a friend, and any other resource you can find. In general, using R frequently in your research or other coursework will help you to prepare and do well on these quizzes. 0.4.4 Homework There will be six homework assignments, starting a few weeks into the course and then due approximately every two weeks (see the detailed schedule in the online course book for exact due dates). Homeworks should be done individually. You will get many chances to work with others during in-course exercises and your final group project, but these homeworks should be a chance to assess how well you understand and can use the course material on your own. Homeworks will be graded for correctness, but some partial credit will be given for questions you try but fail to answer correctly. If you can’t completely do a required task, be sure to show and explain what you tried to do to complete it. Homework is due by the start of class on the due date. Your grade will be reduced by 10 points for each day it is late, and will receive no credit if it is late by over a week. 0.4.5 Final group project You will do the final group project in groups of 2–3. The final product will be a statistical blog post-style article of 1,500 words or less and an accompanying Shiny web application. Come up with an interesting question you’d love to get the answer to that you think you can find data to help you answer. You will need to use the data you find, and R, to write your article. The final product will be a Word document created from an RMarkdown file and an accompanying Shiny web application. Here are some articles to give you an idea of the style and content for this project: Does Christmas come earlier each year? Hilary: the most poisoned baby name in US history Every Guest Jon Stewart Ever Had On “The Daily Show” Should Travelers Avoid Flying Airlines That Have Had Crashes in the Past? Billion-Dollar Billy Beane You will have in-class group work time during weeks 10–15 to work on this. This project will also require some work with your group outside of class. You will be able to get feedback from me through weekly informal written reports in these weeks. I will also provide feedback and help during the in-class group work time. The final group project will be graded with A through F, with the following point values (out of 30 possible): 30 points for an A 25 points for a B 20 points for a C 15 points for a D 10 points for an F If you turn nothing in, you will get 0 points. 0.4.5.1 Final presentation In total, the group’s presentation should last 25-30 minutes. There will then be 5 minutes for questions. Split the presentation up into three parts: (1) the main presentation (10-15 minutes), (2) a tutorial-style discussion of how you used R to do the project (10 minutes) and (3) an overview of your Shiny app (5 minutes). The main presentation part should include the following sections: Research question: In one sentence, what is the main thing you were trying to figure out? Introduction: Why did you decide to do this project? You must convince us that your project answers an interesting and important question. Methods: Where did you find data to answer the question? Why are they appropriate? Are there any limitations we should keep in mind? How did you investigate the data to try to answer your question? This should not include R code (save that for the tutorial part), but rather should use language like “To determine if … was associated with …, we measured the correlation …”. It’s fine for this project if the Methods are fairly simple (“We investigated the distribution of … using boxplots …”, “We took the mean and interquartile range of …”, “We mapped state-level averages of …”, etc.). Why do you choose to use the Methods you used? Why do you think they’re appropriate and useful for your project? Results: What did you find out? Most of these slides should be figures or tables. Discuss your interpretation of your results as you present them. Ideally, you should be able to show your main results in about 4 slides, with one figure or table per slide. Conclusions: So what? How do your results compare with what other people have found out about your research question? Based on what you found, are there now other things you want to check out? The tutorial part should include the following sections: Overview of your approach in R: Step us through a condensed version of how you did your project Interesting packages / techniques: Spend a bit more time on any parts that you found particularly interesting or exciting. Were there packages you used that were helpful that we haven’t talked about in class? Did you find out how to do anything that you think other students could use in the future? Did you end up writing a lot of functions to use? Did you have an interesting way of sharing code and data among your group members? Lessons learned: If you were to do this project again from scratch, what would you do differently? Were there any big wrong turns along the way? Did you find out how to do something late in the project that would have saved you time if you’d started using it earlier? 0.4.5.2 Final report The final report should not exceed 1,500 words. You should aim for no more than five figures and tables. In addition to the good examples linked above, you can find another example of the type of document we’re looking for here from FiveThirtyEight. This example would have received an excellent score if it had been turned in for this class because it is clearly and engagingly written, it presents figures and tables that directly help to answer its main question and that are clearly explained and attractively presented, and its author has convinced me that this is an interesting question worth reading an article about. Notice that it is not very long, only has three figures and tables, and uses fairly simple analysis. I will assess the final report on the following criteria: Is it written with correct spelling and grammar? Is it very clear what your over-arching research question is? Have you made a convincing case that this is an important or interesting problem? You could meet this criterion even by convincing me that this is a problem that just one of you is passionate about (as an example, see here). Are the data that you chose to use reasonable for answering the question? Have you explained any caveats or limitations to the data that I should keep in mind when interpreting your results? As an example of how to do this for an analysis with secondary (imperfect) data, see how this post handles describing the data it uses, particularly in footnotes 1 and 3 and the sentences in the main text that correspond to them. Have you explained the way you analyzed the data clearly enough that I think that I could reproduce your analysis if I had your data? Have you explained a bit why your method of analyzing the data is appropriate for your question? Have you let me know about major caveats or limitations related to the methods of analysis you’re using? Have you presented figures and / or tables with results that help answer your main research question? Is it clear what each is showing and how I should interpret it? (For a nice example of explaining how to interpret results, see footnote 4 here.) Have you explained and interpreted your main results in the text? Have you pointed out any particularly interesting observations (interesting outliers, for example)? When I’m finished with your article, do I have more insight into your research question than when I started? If you include a quote or a figure from an outside source, you must include a full reference for it. Otherwise, I am okay with you doing referencing more in a blog-post style. That is, if you are repeating another person’s ideas or findings, you must reference it, but you may use a web link rather than writing out full references. You do not need to include references of any type for standard analysis techniques (for example, you would not need to include a reference from a Stats book if you are fitting a regression model). 0.4.5.3 Shiny app Finally, you should create a Shiny app to provide an interactive visualization related to your research question. Expectations for that are: It should work. It should include text that is clearly written, without grammatical errors or typos. Any graphics are easily to interpret and follow some of the principles of good graphics covered in class. It includes at least two rendered outputs (e.g., one plot and one table; two plots). It is self-contained– in other words, a user shouldn’t need to read your report or hear your explain the app to understand it. It should include enough information on the app for a user to figure out how to use the app and interpret the output. It is publicly available online. The easiest way to do this is to create a free account at shinyapps.io and publish to that. Only one person in the group needs to publish the app. 0.5 Course set-up Please be sure you have the latest version of R and RStudio installed. Also, be sure to sign up for a free GitHub account. 0.6 Helpful books for learning R There are three publishers that are leaders in good books for learning R: O’Reilly No Starch Press Springer Some particular books you might want to check out: R for Data Science R for Dummies R in a Nutshell R Cookbook R Graphics Cookbook A Beginner’s Guide to R Roger Peng’s Leanpub books Books that other students have found useful include: Introductory R by Robert J. Knell "],
["appendix-a-vocabulary.html", "A Appendix A: Vocabulary A.1 Week 1 (Quiz 1) A.2 Week 2 (Quiz 2) A.3 Week 3 (Quiz 3) A.4 Week 4 (Quiz 4) A.5 Week 5 (Quiz 5) A.6 Week 6 (Quiz 6) A.7 Week 7 (Quiz 7) A.8 Week 8 (Quiz 8)", " A Appendix A: Vocabulary You will be responsible for knowing the following functions and vocabulary for the weekly quizzes. A.1 Week 1 (Quiz 1) c() data.frame() dim() ncol() nrow() head(), option n = read.csv, options head =, skip =, nrow = [...], [..., ...] getwd() setwd(), including setwd(&quot;~&quot;) list.files() install.packages() library() &lt;- = subset() length() open source software “free as in beer” “free as in speech” CRAN GitHub R packages R working directory How to download a csv file from GitHub Nate Silver FiveThirtyEight Grading policies for the course Course requirements / policies for in-class quizzes and weekly journal entries Style rules for naming R objects Difference between R and RStudio Vectors Dataframes Note: Pay attention in the course notes and exercise to where the code uses quotation marks and where it does not– this will help you in the quiz A.2 Week 2 (Quiz 2) source() setwd(), including setwd(&quot;~&quot;), setwd(&quot;..&quot;), setwd(&quot;..\\..&quot;) list.files(), option path = functions in the read.table() family, including read.csv() and read.delim(). What are defaults of the sep = and dec = options for each? For all, the options header =, sep =, as.is =, na.strings =, nrows =, skip =, and col.names =. The tidyverse functions in the read_* family (e.g., read_csv) Advantages of the read_* family of functions compared to their base R analogues (the read.table functions) paste(), option sep = paste0() readxl package and its read_excel() function haven package and its read_sas() function $ class() str() as.Date(), option format = lubridate functions, include ymd, ymd_hm, and mdy range() dplyr package rename() mutate() arrange() %&gt;%, advantages of piping filter() Reading in data from either a local or online flat file save(), option file = load() rm() ls() Main types of vector classes in R: character, numeric, factor, date, logical Which classes of vectors don’t always look like numbers, but R assigns an underlying numeric value to? (Hint: This include the logical class, which R saves with an underlying number, with TRUE = 1 and FALSE = 0.) Common abbreviations for telling R date formats (e.g., “%m”, “%y”) Common logical expressions to use in filter() relative pathnames absolute pathnames delimited files fixed width files R script file (How would you make a new one? What file extension would it have? Why is it important to use? How do you run code from a script file in RStudio?) What kinds of data can be read into R? How to read flat files of data that are online directly into R if they are on: A “http:” site A “https:” site When you might want to save an R object as a .RData file and when (and why) you might not want to A.3 Week 3 (Quiz 3) data() (with and without the name of a dataset as an option) library() (with and without an argument in the parentheses) common addition for all these plotting functions: ggtitle, xlab, ylab, xlim, ylim aes function and common aesthetics, including color, shape, x, y, and fill Some common geoms: geom_histogram, geom_points, geom_lines, geom_boxplot() (both for a single numeric variable and for a numeric vector stratified by a factor) ggpairs() from the GGally package range() min() max() mean() median() table() cor(), both for two variables in a dataframe, and to get the correlation matrix for several variables in a dataframe summary(), as applied to: different classes of vectors (numeric, factor, logical), dataframes, lm objects, and glm objects lm(), data= option glm(), options data=, family= Functions to apply to a lm or glm object: summary(), coef(), residuals(), fitted(), plot(), abline() The following elements that you can pull from the summary of a lm call: summary(mod_1)$call, summary(mod_1)$coef, summary(mod_1)$r.squared, summary(mod_1)$cov.unscaled How to create a logical vector and how to use one to (1) index a data frame and (2) count the number of times a certain condition is true in a vector What the bang operator (!) does to a logical operator What to do if you want to apply a summary statistic function to a vector with missing values (you do not need to know every option name for all the functions, just know that you would need to include an option like na.rm= or use=, and that you can use the help file for a function to figure out the option call for that function). The following about object-oriented programming: In R, it means that some functions, like summary(), will do different things depending on what type of object you call it on. The basic structure of regression formulae in R (for example, y ~ x1 + x2) Difference between using lm() and glm() to fit a linear regression model Difference between the code you would use to fit a linear, Poisson, or logistic model using glm() A.4 Week 4 (Quiz 4) Guidelines for good graphics Data density / data-to-ink ratio Small multiples Edward Tufte Hadley Wickham Where to put the + in ggplot statements to avoid problems (ends of lines instead of starts of new lines) Can you save a ggplot object as an R object that you can reference later? If so, how would you add elements on to that object? How would you print it when you were ready to print the graph to your RStudio graphics window? geom_hline(), geom_vline() geom_text() facet_grid(), facet_wrap() grid.arrange() from the gridExtra package ggthemes package, including theme_few() and theme_tufte() Setting point color for geom_point() both as a constant (all points red) and as a way to show the level of a factor for each observation size, alpha, color Re-naming and re-ordering factors Note: If you read this and find and bring in an example of a “small multiples” graph (from a newspaper, a website, an academic paper), you can get one extra point on this quiz A.5 Week 5 (Quiz 5) Reproducible research, including what it is and advantages to aiming to make your research reproducible R style guidelines on variable names, &lt;- vs. =, line length, spacing, semicolons, commenting, indentation, and code grouping Markup languages (concept and examples) Basic conventions for Markdown (bold, italics, links, headers, lists) Literate programming What working directory R uses for code in an .Rmd document Basic syntax for RMarkdown chunks, including how to name them Options for RMarkdown chunks: echo, eval, messages, warnings, include, fig.width, fig.height, results Difference between global options and chunk options, and which takes precendence What inline code is and how to write it in RMarkdown How to set global options Why style is important in coding RPubs A.6 Week 6 (Quiz 6) Three characteristics of tidy data Five common problems with tidy data and how to resolve them (make sure you understand the examples shown, which you can find out more about in the Hadley Wickham paper I reference) select filter mutate summarize group_by arrange gather spread The *_join family of functions %&gt;% Go through the examples from in-course exercises where we chained together several functions to clean up a dataset and make sure you can follow through these chained examples A.7 Week 7 (Quiz 7) for loops basics of writing a function figuring out the output of a loop based on its code figuring the the output of a function based on its code parentheses around a full assignment statement (e.g., (ex &lt;- 1)) kable() from the knitr package A.8 Week 8 (Quiz 8) apply family of functions matrix objects, including how to subset list objects, including how to subset "],
["appendix-b-homework.html", "B Appendix B: Homework B.1 Homework #1 B.2 Homework #2 B.3 Homework #3 B.4 Homework #4 B.5 Homework #5 B.6 Homework #6", " B Appendix B: Homework The following are six homework assignments for the course. B.1 Homework #1 Due date: Sept. 14 For your first homework assignment, you’ll be working through a few swirl lessons that are relevant to the material we’ve covered so far. Swirl is a platform that helps you learn R in R - you can complete the lessons right in your R console. B.1.1 Getting started First, you’ll need to install the swirl package: install.packages(&quot;swirl&quot;) Next, load the swirl package. We’re going to download a course from swirl’s course repository called R Programming E using the function install_course_github. Then call the swirl() function to enter the interactive platform: library(swirl) uninstall_course(&quot;R_Programming_E&quot;) # Only run if you have an old version of # R_Programming_E installed install_course_github(&quot;swirldev&quot;, &quot;R_Programming_E&quot;) swirl() After calling swirl(), you may be prompted to clear your workspace variables by running rm=(list=ls()). Running this code will clear any variables you already have saved in your global environment. While swirl recommends that you do this, it’s not necessary. B.1.2 Swirl lessons Sign in with your name, and choose R Programming E when swirl asks you to choose a course. For this homework, you will need to work through the following lessons in that course (the lesson number is in parentheses): Basic Building Blocks (1) Vectors (4) Missing Values (5) Subsetting Vectors (6) Logic (8) Looking at Data (12) Dates and Times (14) Each lesson should take about 10-15 minutes, but some are much shorter. You can complete the lessons in any order you want, but you may find it easiest to start with the lowest-numbered lessons and work your way up, in the order we’ve listed the lessons here. You’ll be able to get started on some of these lessons after your first day in class (Basic Building Blocks, for example), but others cover topics that we’ll get to in weeks 2 and 3. Whether or not we’ve covered a swirl topic in class, you should be able to successfully work through the lesson. At the end of each lesson, you’ll be prompted to “inform someone about your successful completion of this lesson via email.” after answering 2 for ‘Yes,’ enter your full name, and enter rachel.severson@colostate.edu as the email address of the person you’d like to notify. You should be sending 7 emails in total. After telling swirl that you would like to send a notification email, an already-populated email should pop up with the lesson you just completed in the subject line - you just need to push send. This might not happen if you access your email through a web browser instead of an app. In this case, just send an email manually with a screenshot of the end of the lesson, and the name of the lesson you just completed. B.1.3 Special swirl commands In the swirl environment, knowing about the following commands will be helpful: Within each lesson, the prompt ... indicates that you should hit Enter to move on to the next section. play(): temporarily exit swirl. It can be useful during a swirl lesson to play around in the R console to try things out. nxt(): regain swirl’s attention after play()ing around in the console. main(): return to swirl’s main menu. bye(): exit swirl. Swirl will save your progress if you exit in the middle of a lesson. You can also hit the Esc. key to exit. (To re-enter swirl, run swirl(). In a new R session you will have to first load the swirl library: library(swirl).) B.1.3.1 For fun While they aren’t required for class, you should consider trying out some other swirl lessons later in the course. The Functions lesson, as well as lapply and sapply and vapply and tapply could be particularly useful. You can also look through the course directory to see what other courses and lessons are available. If you are doing extra swirl courses on your own, you probably want to do them through the “R Programming”, rather than the “R Programming E”, course, since you won’t need to let us know by email. To get this, you can run: library(swirl) install_course(&quot;R_Programming&quot;) swirl() B.2 Homework #2 Due date: Sept. 28 For Homework 2, recreate the R Markdown document that you can download from here. Here are some initial tips: Your goal is to create an R Markdown document that you can compile to create a Word document that looks just like the example document we’ve linked above. You will turn in (by email) both the compiled Word document and the .Rmd original file. Add your name as “Author” and the due date of the assignment as “Date”. You should add these within the R Markdown document, rather than changing them in the final, compiled Word document. If you want to get started before you know how to use R Markdown, you can go ahead and write all of the necessary code to replicate the output and figures in the document in an R script. The code chunks here have been hidden with the option echo = FALSE, but you should include your code in your final document. Set the chunk options warning = FALSE and message = FALSE to prevent warnings and messages from being printed out. You will get some messages and warnings in the code from things like missing values and from loading packages, but you want to hide all of those messages in your final document. For things like templates, colors, level of transparency, and point size, you will receive full credit if you create figures that are visually similar to the ones shown in the example document. In other words, if the example document shows some transparency in points, you will get full credit if you also include some transparency in the points in your plot, but you do not have to include the exact same value of alpha. In R, there are often many different ways to achieve something. As long as your code works, it’s fine if you haven’t coded it exactly like we have in our version. However, your output should look identical to ours (or, in the case of color, transparency, point size, and themes, visually similar). You will not lose points if you cannot recreate the table in the document (although you should try to!). The last section, under the heading “Extra challenge– not graded”, is not graded. However, if you’d like an extra challenge, you’re welcome to try it out and include it in your final submission! If you need them, here are some further tips: Functions from the tidyverse (especially from dplyr, readr, and ggplot packages) will make your life much easier for this exercise. You can now install and load the tidyverse package to load them all at once. To rename column names with “special” characters in them, wrap the whole old column name in backticks. For example, to change a column name that has a dollar sign in it, you would use something like “rename(new_col_name = `old_col_name$`)”. To change the size of a figure in a report, use the “fig.width” and “fig.height” chunk options. You will want to use scale_fill_brewer in several of the figures. Don’t forget that, within functions like scale_x_continuous, you can use the argument breaks to set where the axis has breaks, and then labels to set what will actually be shown at each break. The string “\\n” can be included in legends and labels to include a carriage return. Coordinates can be flipped in a graph with the coord_flip geom. So, if you can figure out a way to make a graph with the coordinates flipped, use that code and just add coord_flip at the end. B.3 Homework #3 Due date: Oct. 12 For Homework 3, recreate the R Markdown document that you can download from here. Here are some initial tips: Your goal is to create an R Markdown document that you can compile to create a Word document that looks just like the target document we’ve linked above. The only difference is that you will use echo = TRUE to show your code within the rendered Word document. All formating within the text should be similar or identical to the target document. You will turn in (by email) both the compiled Word document and the .Rmd original file. Add your name as “Author” and the due date of the assignment as “Date”. You should add these within the R Markdown document, rather than changing them in the final, compiled Word document. Set the chunk options warning = FALSE and message = FALSE to prevent warnings and messages from being printed out. You will get some messages and warnings in the code from things like missing values and from loading packages, but you want to hide all of those messages in your final document. For things like templates, colors, level of transparency, and point size, you will receive full credit if you create figures that are visually similar to the ones shown in the example document. In other words, if the example document shows some transparency in points, you will get full credit if you also include some transparency in the points in your plot, but you do not have to include the exact same value of alpha. In R, there are often many different ways to achieve something. As long as your code works, it’s fine if you haven’t coded it exactly like we have in our version. However, your output should look identical to ours (or, in the case of color, transparency, point size, and themes, visually similar). There is one formated table in the target document. Be sure that you render this as a formated table, not as raw R output. If you need them, here are some further tips: Functions from the tidyverse (especially from dplyr, readr, and ggplot packages) will make your life much easier for this exercise. You can now install and load the tidyverse package to load them all at once. To reference column names with “special” characters in them, like dollar signs or spaces, wrap the whole old column name in backticks. For example, to change a column name that has a dollar sign in it, you would use something like “rename(new_col_name = `old_col_name$`)”. To change the size of a figure in a report, use the “fig.width” and “fig.height” chunk options. Don’t forget that there are functions in the scale family that allow you to use log-scale axes. B.4 Homework #4 Optional due date: Oct. 28 All instructions for this homework can be downloaded here. The example “fars_analysis.pdf” document you will try to recreate is here. You have the option to turn in parts of this homework (up through creating a clean dataset) by Oct. 28. If you do so, I will email you the code I used to clean the data, so you can check your own code and be sure you have a reasonable version of the clean data as you do the final parts of the assignment. B.5 Homework #5 Due date: Nov. 9 All instructions for this homework can be downloaded here. The example “fars_analysis.pdf” document you will try to recreate is here. You will submit this homework by posting a repo with your project directory on GitHub. We will work on setting that up during an in-course exercise. B.6 Homework #6 Due date: Nov. 30 Read the article Good Enough Practices in Scientific Computing by Wilson et al. (available here). In a half page, describe which of these “pretty good practices” your last homework incorporated. Also list one or two practices that you did not follow in your last homework but that would have made sense and how you could have followed them. Read the article Science Isn’t Broken on FiveThirtyEight. This article includes an interactive graphic. In a half page, give your opinion on whether this interactive graphic helps convey the main message of the article. Also, describe in general details how you might be able to create a graphic like this in R. Find an article in The R Journal that describes an R package that you could use in your own research or otherwise find interesting. Describe why the package was created and what you think it’s most interesting features are. In an R Markdown document, run one or two of the R examples included in the article. "],
["references.html", "References", " References "]
]
